"""
Django settings for inference_gateway project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import json
import os
from dotenv import load_dotenv
from inference_gateway.utils import textfield_to_strlist

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# Load .env variables (override=True forces to prioritize values from .env file)
load_dotenv(override=True)

# Django secret key
SECRET_KEY = os.getenv("SECRET_KEY")

# Define whether we are in the automated test suite mode
RUNNING_AUTOMATED_TEST_SUITE = os.getenv("RUNNING_AUTOMATED_TEST_SUITE", "False").lower() in ("true", "1", "t")

# Globus App credentials
GLOBUS_APPLICATION_ID = os.getenv("GLOBUS_APPLICATION_ID")
GLOBUS_APPLICATION_SECRET = os.getenv("GLOBUS_APPLICATION_SECRET")
POLARIS_ENDPOINT_ID = os.getenv("POLARIS_ENDPOINT_ID")
POLARIS_ENDPOINT_SECRET = os.getenv("POLARIS_ENDPOINT_SECRET")
GLOBUS_GROUP_MANAGER_ID = os.getenv("GLOBUS_GROUP_MANAGER_ID", "")
GLOBUS_GROUP_MANAGER_SECRET = os.getenv("GLOBUS_GROUP_MANAGER_SECRET", "")

# Batch processing feature flag
ENABLE_BATCHES = os.getenv("ENABLE_BATCHES", False) == 'True'
MAX_BATCHES_PER_USER = int(os.getenv("MAX_BATCHES_PER_USER", 1))

# Django debug on/off switch
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "t")

# URL to the persistent inference service
INFERENCE_SERVICE_URL = os.getenv("INFERENCE_SERVICE_URL", "")

# Extract Globus policies that will determine which domains get access
GLOBUS_POLICIES = textfield_to_strlist(os.getenv("GLOBUS_POLICIES", ""))
NUMBER_OF_GLOBUS_POLICIES = len(GLOBUS_POLICIES)
GLOBUS_POLICIES = ",".join(GLOBUS_POLICIES)

# Extract allowed Globus groups that will determine which individuals get access
GLOBUS_GROUPS = textfield_to_strlist(os.getenv("GLOBUS_GROUPS", ""))
NUMBER_OF_GLOBUS_GROUPS = len(GLOBUS_GROUPS)

# Parameters for the Globus Compute executor
GLOBUS_EXECUTOR_BATCH_SIZE = int(os.getenv("GLOBUS_EXECUTOR_BATCH_SIZE", 128))
GLOBUS_EXECUTOR_API_BURST_LIMIT = int(os.getenv("GLOBUS_EXECUTOR_API_BURST_LIMIT", 4))
GLOBUS_EXECUTOR_API_BURST_WINDOW_S = int(os.getenv("GLOBUS_EXECUTOR_API_BURST_WINDOW_S", 16))

# Globus Compute task group ID for the management commands
GLOBUS_MANAGEMENT_TASK_GROUP_ID = os.getenv("GLOBUS_MANAGEMENT_TASK_GROUP_ID", None)

# Extract allowed identity providers
AUTHORIZED_IDPS = json.loads(os.getenv("AUTHORIZED_IDPS", "{}"))
AUTHORIZED_IDP_NAMES = list(AUTHORIZED_IDPS.keys())
AUTHORIZED_IDP_UUIDS = list(AUTHORIZED_IDPS.values())

# THIS SHOULD BE CHANGED
ALLOWED_HOSTS = ["*"]

APPEND_SLASH = False


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'resource_server',
    'resource_server_async',
    'drf_spectacular',
    # 'dashboard',
    'dashboard_async'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    # YOUR SETTINGS
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Inference Gateway API',
    'DESCRIPTION': 'Inference Gateway',
    'VERSION': '0.0.1',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
}

ROOT_URLCONF = 'inference_gateway.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'inference_gateway.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('PGDATABASE', 'postgres'),
        'USER': os.getenv('PGUSER', 'postgres'),
        'PASSWORD': os.getenv('PGPASSWORD', 'postgres'),
        'HOST': os.getenv('PGHOST', 'pgbouncer'),  # Connect to the pgbouncer service
        'PORT': os.getenv('PGPORT', '6432'),       # Default PgBouncer port
        "OPTIONS": {
            "connect_timeout": 10,
        },
        "CONN_MAX_AGE": 0,
        "ATOMIC_REQUESTS": False,
        "CONN_HEALTH_CHECKS": False,
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'info.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Static files directory for deployment
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# --- Gateway Specific Settings ---
# --- Resource Server Configuration ---
ALLOWED_FRAMEWORKS = {
    "polaris": ["llama-cpp", "vllm"],
    "sophia": ["vllm","infinity"]
}
ALLOWED_OPENAI_ENDPOINTS = {
    "polaris": ["chat/completions", "completions", "embeddings"],
    "sophia": ["chat/completions", "completions", "embeddings"]
}
ALLOWED_CLUSTERS = list(ALLOWED_FRAMEWORKS.keys())

ALLOWED_QSTAT_ENDPOINTS = {
    "sophia":{
        "endpoint_uuid":os.getenv("SOPHIA_QSTAT_ENDPOINT_UUID"),
        "function_uuid":os.getenv("SOPHIA_QSTAT_FUNCTION_UUID")
        #"function_uuid":"977414a2-8acc-42c7-a271-f965c39091ee"
    }
}


# --- Optional: Grafana Admin Credentials (for Docker setup) ---
# GF_SECURITY_ADMIN_USER=admin
# GF_SECURITY_ADMIN_PASSWORD=admin