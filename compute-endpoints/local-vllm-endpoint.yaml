display_name: local-vllm-endpoint
engine:
  type: GlobusComputeEngine
  max_retries_on_system_failure: 2
  max_workers_per_node: 2
  job_status_kwargs:
    max_idletime: 7200
  provider:
    type: LocalProvider
    launcher:
      type: SimpleLauncher
    init_blocks: 1
    max_blocks: 1
    min_blocks: 0
    worker_init: |
      # Activate the conda environment
      conda activate /opt/anaconda3/envs/inference-gateway-py3.11.9-env
      
      # Define the start_model function
      start_model() {
          local model_name="$1"
          local command="$2"
          local log_file="$3"
          local attempt_counter_var_name="$4" # Name of the counter variable
          local max_attempts=2
          local timeout=3600

          # Use eval for reading and incrementing the counter via its name
          while [ "$(eval echo \"\$$attempt_counter_var_name\")" -lt "$max_attempts" ]; do
              eval "$attempt_counter_var_name=\$(( $(eval echo \"\$$attempt_counter_var_name\") + 1 ))"
              echo "Starting $model_name (Attempt $(eval echo \"\$$attempt_counter_var_name\") of $max_attempts)"

              log_dir="$(dirname \"$log_file\")"
              mkdir -p "$log_dir"
              touch "$log_file"
              > "$log_file"

              nohup bash -c "$command" > "$log_file" 2>&1 &
              local pid=$!

              local start_time=$(date +%s)
              while true; do
                  # Check if log file exists and contains the success message
                  if [ -f "$log_file" ] && grep -q "INFO:     Application startup complete." "$log_file"; then
                      echo "$model_name started successfully"
                      return 0 # Success
                  fi

                  # Check if process still exists
                  if ! kill -0 "$pid" 2>/dev/null; then
                      echo "$model_name process (PID $pid) exited unexpectedly. Checking logs..."
                      # Optional: tail the log file for context
                      tail -n 20 "$log_file"
                      # Consider cleanup or breaking loop based on exit reason if needed
                      # cleanup_python_processes # Optional: Call cleanup if needed
                      break # Exit inner loop as process is gone
                  fi

                  local current_time=$(date +%s)
                  local elapsed_time=$((current_time - start_time))

                  if [ "$elapsed_time" -ge "$timeout" ]; then
                      echo "Timeout reached for $model_name. Killing process PID $pid."
                      kill -9 "$pid" 2>/dev/null || true
                      break # Exit inner loop due to timeout
                  fi

                  sleep 5
              done # End of inner monitoring loop

              # This point is reached if the process exited unexpectedly or timed out
              echo "Failed to start/confirm $model_name on attempt $(eval echo \"\$$attempt_counter_var_name\"). Retrying if possible..." | tee -a error_log.txt
              # cleanup_python_processes # Optional: Call cleanup if needed

          done # End of outer retry loop

          echo "Failed to start $model_name after $max_attempts attempts." | tee -a error_log.txt
          exit 1 # Exit script indicating failure
      }

      # Script Execution starts here
      export VLLM_CPU_OMP_THREADS_BIND="0-8"
      export VLLM_CPU_KVCACHE_SPACE=8
      model_name="meta-llama/Meta-Llama-3.1-8B-Instruct"
      model_command="vllm serve ${model_name} --max-model-len 4096 --port 8001"
      # Corrected log file name construction
      log_file="$PWD/logfile_local_vllm_${model_name//\//-}_$(hostname).log"

      # Initialize retry counter (global for the script scope)
      retry_counter_model_1=0

      # Main loop to start the model
      while true; do
          echo "Starting model sequence..."
          # Pass the *name* of the counter variable as a string
          if ! start_model "$model_name" "$model_command" "$log_file" "retry_counter_model_1"; then
              echo "start_model function indicated failure for $model_name. Restarting sequence..."
              # Optional: add a small delay before restarting
              sleep 2
              continue  # Restart the outer loop
          fi
          # If start_model returns success (0)
          echo "Model $model_name started successfully."
          break  # Exit the main loop
      done

      # Keep the worker alive after successful start (optional, adjust as needed)
      echo "Worker init script finished successfully. Model should be running."
      # You might add a `sleep infinity` here if the worker needs to stay alive
      # independently after starting the background process.
      # sleep infinity
allowed_functions:
  - b9779cbe-c6d3-45ee-b68d-9012530cfa82