amqp_port: 443
display_name: sophia-vllm-nemotron-4-340B-instruct 
engine:
  type: GlobusComputeEngine
  max_retries_on_system_failure: 2
  max_workers_per_node: 128
  job_status_kwargs:
    max_idletime: 86400
  address:
    type: address_by_interface
    ifname: ens10f0
  provider:
    type: PBSProProvider
    launcher:
      type: MpiExecLauncher
    account: argonne_tpc
    select_options: ngpus=8
    scheduler_options: '#PBS -l filesystems=home:eagle'
    queue: 'by-node'
    init_blocks: 0
    max_blocks: 1
    min_blocks: 0
    nodes_per_block: 4
    walltime: 24:00:00
    worker_init: |
        # Read nodes from PBS_NODEFILE
        nodes=($(cat $PBS_NODEFILE | uniq))
        num_nodes=${#nodes[@]}

        # Get the current node's hostname (assumed to be the head node)
        head_node=$(hostname | sed 's/.lab.alcf.anl.gov//')

        echo "Nodes: ${nodes[@]}"
        echo "Head node: $head_node"

        # Get the IP address of the head node
        RAY_HEAD_IP=$(getent hosts $head_node | awk '{ print $1 }')
        echo "Ray head IP: $RAY_HEAD_IP"

        # Export variables for use in functions
        export head_node
        export RAY_HEAD_IP

        export HTTP_PROXY="http://proxy.alcf.anl.gov:3128"
        export HTTPS_PROXY="http://proxy.alcf.anl.gov:3128"
        export http_proxy="http://proxy.alcf.anl.gov:3128"
        export https_proxy="http://proxy.alcf.anl.gov:3128"
        export ftp_proxy="http://proxy.alcf.anl.gov:3128"

        # Load modules and activate the conda environment
        source /etc/profile.d/modules.sh
        source /etc/profile  # Include this to initialize environment properly
        module use /soft/modulefiles
        module load conda

        # Source the Conda initialization script directly
        source /soft/conda/etc/profile.d/conda.sh  # Adjust this path if necessary
        conda activate /eagle/argonne_tpc/inference-gateway/envs/vllmv0.6.2-sophia-env/

        # Set environment variables
        export HF_DATASETS_CACHE='/eagle/argonne_tpc/model_weights/'
        export HF_HOME='/eagle/argonne_tpc/model_weights/'
        export RAY_TMPDIR='/tmp'
        export NCCL_SOCKET_IFNAME=bond0
        export OMP_NUM_THREADS=4
        ulimit -c unlimited



        # Function to stop existing Ray processes
        stop_ray() {
            echo "Stopping Ray on $(hostname)"
            ray stop -f
        }

        # Stop Ray on all nodes using mpiexec
        echo "Stopping any existing Ray processes on all nodes..."
        mpiexec -n $num_nodes -hostfile $PBS_NODEFILE bash -c "ray stop -f"

        # Function to start Ray head node
        start_ray_head() {
            set -x  # Enable command echo for debugging

            # Set proxy configurations
            export HTTP_PROXY="http://proxy.alcf.anl.gov:3128"
            export HTTPS_PROXY="http://proxy.alcf.anl.gov:3128"
            export http_proxy="http://proxy.alcf.anl.gov:3128"
            export https_proxy="http://proxy.alcf.anl.gov:3128"
            export ftp_proxy="http://proxy.alcf.anl.gov:3128"

            # Load modules and activate the conda environment
            source /etc/profile.d/modules.sh
            source /etc/profile  # Include this to initialize environment properly
            module use /soft/modulefiles
            module load conda

            # Source the Conda initialization script directly
            source /soft/conda/etc/profile.d/conda.sh  # Adjust this path if necessary
            conda activate /eagle/argonne_tpc/inference-gateway/envs/vllmv0.6.2-sophia-env/

            # Set environment variables
            export HF_DATASETS_CACHE='/eagle/argonne_tpc/model_weights/'
            export HF_HOME='/eagle/argonne_tpc/model_weights/'
            export RAY_TMPDIR='/tmp'
            export NCCL_SOCKET_IFNAME=bond0
            export OMP_NUM_THREADS=4
            ulimit -c unlimited

            current_node=$(hostname)
            ray_port=6379

            # Debug: Echo OMP_NUM_THREADS and hostname
            echo "OMP_NUM_THREADS on $current_node: $OMP_NUM_THREADS"

            echo "Starting Ray head on $current_node"
            # Start Ray head node
            ray start --num-cpus=64 --num-gpus=8 --head --port=$ray_port
            # Wait for Ray head to be up
            echo "Waiting for Ray head to be up..."
            until ray status; do
                sleep 5
                echo "Waiting..."
            done
        }

        # Function to start Ray worker node
        start_ray_worker() {
            set -x  # Enable command echo for debugging

            # Set proxy configurations
            export HTTP_PROXY="http://proxy.alcf.anl.gov:3128"
            export HTTPS_PROXY="http://proxy.alcf.anl.gov:3128"
            export http_proxy="http://proxy.alcf.anl.gov:3128"
            export https_proxy="http://proxy.alcf.anl.gov:3128"
            export ftp_proxy="http://proxy.alcf.anl.gov:3128"

            # Load modules and activate the conda environment
            source /etc/profile.d/modules.sh
            source /etc/profile  # Include this to initialize environment properly
            module use /soft/modulefiles
            module load conda

            # Source the Conda initialization script directly
            source /soft/conda/etc/profile.d/conda.sh  # Adjust this path if necessary
            conda activate /eagle/argonne_tpc/inference-gateway/envs/vllmv0.6.2-sophia-env/

            # Set environment variables
            export HF_DATASETS_CACHE='/eagle/argonne_tpc/model_weights/'
            export HF_HOME='/eagle/argonne_tpc/model_weights/'
            export RAY_TMPDIR='/tmp'
            export NCCL_SOCKET_IFNAME=bond0
            export OMP_NUM_THREADS=4
            ulimit -c unlimited

            current_node=$(hostname)
            ray_port=6379

            # Debug: Echo OMP_NUM_THREADS and hostname
            echo "OMP_NUM_THREADS on $current_node: $OMP_NUM_THREADS"

            echo "Starting Ray worker on $current_node, connecting to $RAY_HEAD_IP:$ray_port"
            # Start Ray worker node
            ray start --num-gpus=8 --num-cpus=64 --address=$RAY_HEAD_IP:$ray_port
        }

        echo "Starting Ray head node..."
        mpiexec -n 1 -host $head_node bash -l -c "$(declare -f start_ray_head); start_ray_head"

        # Get worker nodes (exclude head node)
        worker_nodes=()
        for node in "${nodes[@]}"; do
            short_node=$(echo $node | sed 's/.lab.alcf.anl.gov//')
            if [ "$short_node" != "$head_node" ]; then
                worker_nodes+=("$short_node")
            fi
        done

        echo "Starting Ray worker nodes..."
        for worker in "${worker_nodes[@]}"; do
            echo "Starting Ray worker on $worker"
            mpiexec -n 1 -host $worker bash -l -c "export RAY_HEAD_IP=$RAY_HEAD_IP; $(declare -f start_ray_worker); start_ray_worker"
        done

        echo "Ray cluster setup complete."

        # Function to start the model (only on rank 0)
        start_model() {
            local model_name="$1"
            local command="$2"
            local log_file="$3"
            local -n attempt_counter_ref="$4"  # Pass by reference for attempt counter
            local max_attempts=3
            local timeout=900  # 15 minutes timeout

            while [ $attempt_counter_ref -lt $max_attempts ]; do
                attempt_counter_ref=$((attempt_counter_ref + 1))
                echo "Starting $model_name (Attempt $attempt_counter_ref of $max_attempts)"

                # Start the model server
                echo "Starting model server..."
                nohup bash -c "$command" > "$log_file" 2>&1 &
                local pid=$!

                # Wait for the startup message or timeout
                local start_time=$(date +%s)
                while true; do
                    if [[ -f "$log_file" ]] && grep -q "INFO:     Application startup complete." "$log_file"; then
                        echo "$model_name started successfully"
                        return 0
                    fi

                    local current_time=$(date +%s)
                    local elapsed_time=$((current_time - start_time))

                    if [ $elapsed_time -ge $timeout ]; then
                        echo "Timeout reached for $model_name. Killing process."
                        kill -9 $pid
                        break
                    fi

                    sleep 5
                done

                echo "Failed to start $model_name. Cleaning up and retrying..." | tee -a error_log.txt
                # Continue to next attempt
            done
            echo "Failed to start $model_name after $max_attempts attempts" | tee -a error_log.txt
            exit 1
        }

        # Initialize retry counter for the model
        retry_counter_model_1=0
        # Start the model
        if ! start_model "Nemotron-4-340B-Instruct" \
            "vllm serve mgoin/Nemotron-4-340B-Instruct-hf --host 127.0.0.1 --port 8000 \
            --tensor-parallel-size 8 --pipeline-parallel-size 4 --enforce-eager \
            --trust-remote-code --gpu-memory-utilization 0.95 --disable-log-requests" \
            "$PWD/logfile_sophia-vllm-nemotron-4-340B-Instruct-hf_$(hostname).log" retry_counter_model_1; then
            echo "Model failed to start."
            exit 1
        fi

# Limit the functions UUID that can be execute
allowed_functions:
  - 1c6f251e-8ed9-4f9c-b142-ce6602f9c0ab