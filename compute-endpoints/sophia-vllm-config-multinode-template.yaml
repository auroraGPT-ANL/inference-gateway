amqp_port: 443
display_name: sophia-vllm-meta-llama-3.1-405b-instruct
engine:
  type: GlobusComputeEngine
  max_retries_on_system_failure: 1
  max_workers_per_node: 100
  job_status_kwargs:
    max_idletime: 86400
  address:
    type: address_by_interface
    ifname: ens10f0
  provider:
    type: PBSProProvider
    launcher:
      type: SimpleLauncher
    account: argonne_tpc
    select_options: ngpus=8
    scheduler_options: '#PBS -l filesystems=home:eagle'
    queue: 'by-node'
    init_blocks: 0
    max_blocks: 1
    min_blocks: 0
    nodes_per_block: 4
    walltime: 24:00:00
    worker_init: |
        # Source the common script
        source /home/openinference_svc/sophia_common_scripts.sh

        # Setup the environment
        setup_environment

        # Read nodes from PBS_NODEFILE
        nodes=($(sort -u "$PBS_NODEFILE"))
        num_nodes=${#nodes[@]}

        # Get the current node's hostname (assumed to be the head node)
        head_node=$(hostname | sed 's/.lab.alcf.anl.gov//')

        echo "Nodes: ${nodes[@]}"
        echo "Head node: $head_node"

        # Get the IP address of the head node
        RAY_HEAD_IP=$(getent hosts "$head_node" | awk '{ print $1 }')
        echo "Ray head IP: $RAY_HEAD_IP"

        # Export variables for use in functions
        export head_node
        export RAY_HEAD_IP
        export HOST_IP="$RAY_HEAD_IP"
        export RAY_ADDRESS="$RAY_HEAD_IP:6379"

        # Define worker nodes (exclude head node)
        worker_nodes=()
        for node in "${nodes[@]}"; do
            short_node=$(echo "$node" | sed 's/.lab.alcf.anl.gov//')
            if [ "$short_node" != "$head_node" ]; then
                worker_nodes+=("$short_node")
            fi
        done

        echo "Worker nodes: ${worker_nodes[@]}"

        # Stop Ray on all nodes using mpiexec
        echo "Stopping any existing Ray processes on all nodes..."
        mpiexec -n "$num_nodes" -hostfile "$PBS_NODEFILE" bash -c "source $COMMON_SETUP_SCRIPT; setup_environment; stop_ray; cleanup_python_processes;"

        # Start Ray head node
        echo "Starting Ray head node..."
        mpiexec -n 1 -host "$head_node" bash -l -c "source $COMMON_SETUP_SCRIPT; export RAY_HEAD_IP=$RAY_HEAD_IP; setup_environment; start_ray_head"

        echo "Starting Ray worker nodes..."
        for worker in "${worker_nodes[@]}"; do
            echo "Starting Ray worker on $worker"
            mpiexec -n 1 -host "$worker" bash -l -c "source $COMMON_SETUP_SCRIPT; export RAY_HEAD_IP=$RAY_HEAD_IP; setup_environment; start_ray_worker"
        done

        # Verify Ray cluster status
        echo "Verifying Ray cluster status..."
        verify_ray_cluster "$num_nodes"

        echo "Ray cluster setup complete."

        # Define model parameters
        model_name="Meta-Llama-3.1-405B-Instruct"
        model_command="vllm serve meta-llama/Meta-Llama-3.1-405B-Instruct --host 127.0.0.1 --port 8000 \
        --tensor-parallel-size 8 --pipeline-parallel-size 4 --max-model-len 16384 \
        --disable-log-stats --enable-prefix-caching --enable-chunked-prefill --multi-step-stream-outputs False \
        --trust-remote-code --gpu-memory-utilization 0.95 --disable-log-requests \
        --ssl-keyfile ~/certificates/mykey.key --ssl-certfile ~/certificates/mycert.crt"
        log_file="$PWD/logfile_sophia-vllm-{model_name}_$(hostname).log"

        # Initialize retry counter for the model
        retry_counter_model_1=0

        # Start the model
        while true; do
            echo "Starting models sequence..."
            if ! start_model "$model_name" "$model_command" "$log_file" retry_counter_model_1; then
                continue  # Restart from the beginning if this fails
            fi
            echo "All models started successfully."
            break
        done

# Limit the functions UUID that can be execute
allowed_functions:
  - 3073ed77-6a17-4e85-826a-e1dca5309e01